# name: Gitea Actions Workflow for DEVPASS [ FE ]
# run-name: ${{ gitea.actor }} is testing out automated Docker Image Deployment with Gitea Actions üöÄ

# on:
#     push:
#         tags:
#             - v*

# env:
#     # NEXT #######################################################
#     # IMAGE
#     NEXT_IMAGE_NAME: ${{ secrets.BASE_URL }}/fe/project-devpass-fe
#     # DOCKER FILE
#     NEXT_DOCKER_FILE_DEV: dockerfile.dev.yaml
#     NEXT_DOCKER_FILE_STAGING: dockerfile.staging.yaml
#     NEXT_DOCKER_FILE_PROD: dockerfile.prod.yaml
#     # CONTAINER
#     NEXT_CONTAINER_DEV: devpass-frontend-dev
#     NEXT_CONTAINER_STAGING: devpass-frontend-staging
#     NEXT_CONTAINER_PROD: devpass-frontend-prod
#     # PORT
#     APPLICATION_PORT_PROD: 3000
#     APPLICATION_PORT_STAGING: 3001
#     APPLICATION_PORT_DEV: 3002

# jobs:
#     build-and-push:
#         runs-on: fe-ubuntu-22.04

#         steps:
#             - name: CheckOut
#               uses: https://github.com/actions/checkout@v4

#             # TAG ÌôïÏù∏
#             - name: Check Version Tag
#               if: startsWith(github.ref, 'refs/tags/')
#               run: |
#                   echo "üîñ Checking version tag..."

#                   echo "${{ github.ref }}"
#                   tag=$(echo "${{ github.ref }}" | cut -d '/' -f 3)
#                   echo "‚ú® Version : $tag"
#                   echo "::set-env name=VERSION_TAG::$tag"

#                   echo "üçÄ Version tag checked successfully."

#             # ÌôòÍ≤Ω & DATABASE ÏÑ∏ÌåÖ ( DEV / STAGING / PROD )
#             - name: Set Environment
#               if: env.VERSION_TAG
#               run: |
#                   echo "üîß Determining environment based on version tag..."
#                   if [[ "$VERSION_TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
#                     DB_ENV=PROD
#                     APPLICATION_PORT=${{ env.APPLICATION_PORT_PROD }}
#                     NEXT_DOCKER_FILE=${{ env.NEXT_DOCKER_FILE_PROD }}
#                     NEXT_CONTAINER=${{ env.NEXT_CONTAINER_PROD }}
#                   elif [[ "$VERSION_TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+-beta\.[0-9]+$ ]]; then
#                     DB_ENV=STAGING
#                     APPLICATION_PORT=${{ env.APPLICATION_PORT_STAGING }}
#                     NEXT_DOCKER_FILE=${{ env.NEXT_DOCKER_FILE_STAGING }}
#                     NEXT_CONTAINER=${{ env.NEXT_CONTAINER_STAGING }}
#                   elif [[ "$VERSION_TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+-alpha\.[0-9]+$ ]]; then
#                     DB_ENV=DEV
#                     APPLICATION_PORT=${{ env.APPLICATION_PORT_DEV }}
#                     NEXT_DOCKER_FILE=${{ env.NEXT_DOCKER_FILE_DEV }}
#                     NEXT_CONTAINER=${{ env.NEXT_CONTAINER_DEV }}
#                   else
#                     echo "‚ùå Invalid tag format"
#                     exit 1
#                   fi

#                   echo "‚ú® Environment: $DB_ENV"
#                   echo "::set-env name=DB_ENV::$DB_ENV"

#                   echo "‚ú® APPLICATION_PORT: $APPLICATION_PORT"
#                   echo "::set-env name=APPLICATION_PORT::$APPLICATION_PORT"

#                   echo "‚ú® NEXT_DOCKER_FILE: $NEXT_DOCKER_FILE"
#                   echo "::set-env name=NEXT_DOCKER_FILE::$NEXT_DOCKER_FILE"

#                   echo "‚ú® NEXT_CONTAINER: $NEXT_CONTAINER"
#                   echo "::set-env name=NEXT_CONTAINER::$NEXT_CONTAINER"

#             # Docker Î°úÍ∑∏Ïù∏ & Registry Ïó∞Í≤∞
#             - name: Docker Login
#               if: env.VERSION_TAG
#               uses: docker/login-action@v3
#               with:
#                   registry: ${{ secrets.BASE_URL }}
#                   username: ${{ secrets.SAVIN_USERNAME }}
#                   password: ${{ secrets.SAVIN_PASSWORD}}

#             # [ Next Application ] Docker Ïù¥ÎØ∏ÏßÄ ÎπåÎìú & Ìë∏Ïãú
#             - name: Build & Push Next Application Docker Image
#               if: env.VERSION_TAG
#               run: |
#                   echo "ü™Ñ [ ${{ env.NEXT_IMAGE_NAME }}:${{ env.VERSION_TAG }} ] Building Docker image..."

#                   docker build -f ${{ env.NEXT_DOCKER_FILE }} -t ${{ env.NEXT_IMAGE_NAME }}:${{ env.VERSION_TAG }} .

#                   echo "üçÄ [ ${{ env.NEXT_IMAGE_NAME }}:${{ env.VERSION_TAG }} ] Docker image built successfully!"

#                   echo "üöÄ [ ${{ env.NEXT_IMAGE_NAME }}:${{ env.VERSION_TAG }} ] Pushing Docker image to registry..."

#                   docker push ${{ env.NEXT_IMAGE_NAME }}:${{ env.VERSION_TAG }}

#                   echo "üçÄ [ ${{ env.NEXT_IMAGE_NAME }}:${{ env.VERSION_TAG }} ] Docker image pushed successfully!"

#             # Docker Ïª®ÌÖåÏù¥Îçî Ï§ëÏßÄ
#             - name: Stop Docker Container
#               if: env.VERSION_TAG
#               run: |
#                   echo "üõë Stopping Docker container if it's running..."
#                   if [ $(docker ps -q -f name=${{ env.NEXT_CONTAINER }}) ]; then
#                     docker stop ${{ env.NEXT_CONTAINER }}
#                     echo "üçÄ Docker container stopped successfully!"
#                   else
#                     echo "‚ö†Ô∏è No running container found with the name ${{ env.NEXT_CONTAINER }}."
#                   fi

#             # Docker Ïª®ÌÖåÏù¥Îçî ÏÇ≠Ï†ú
#             - name: Remove Docker Container
#               if: env.VERSION_TAG
#               run: |
#                   echo "üóë Removing existing Docker container if it exists..."
#                   if [ $(docker ps -aq -f name=${{ env.NEXT_CONTAINER }}) ]; then
#                     docker rm ${{ env.NEXT_CONTAINER }}
#                     echo "üçÄ Docker container removed successfully!"
#                   else
#                     echo "‚ö†Ô∏è No container found with the name ${{ env.NEXT_CONTAINER }} to remove."
#                   fi

#             # Docker Ïª®ÌÖåÏù¥Îçî Ïû¨Ïã§Ìñâ ( ÏÉàÎ°ú ÎπåÎìúÌïú Ïù¥ÎØ∏ÏßÄ )
#             - name: Restart Docker Container
#               if: env.VERSION_TAG
#               run: |
#                   echo "üöÄ Starting new Docker container with the latest image..."

#                   docker run -d --name ${{ env.NEXT_CONTAINER }} \
#                     -p ${{ env.APPLICATION_PORT }}:3000 \
#                     ${{ env.NEXT_IMAGE_NAME }}:${{ env.VERSION_TAG }}

#                   echo "üçÄ Docker container started successfully with the new image!"
